{% extends 'baseAdmin.html.twig' %}

{% block body %}

  <style>
          /* Define the animation keyframes */
        @keyframes fadeInOut {
          0% {
            opacity: 0;
          }
          50% {
            opacity: 1;
          }
          100% {
            opacity: 0;
          }
        }

        /* Apply the pulsating animation to the element */
        .animated-text {
          animation-name: fadeInOut;
          animation-duration: 3s;
          animation-iteration-count: infinite; /* Infinite loop */
        }

      
  </style>
  {# Assuming you have fetched the rates in your controller and passed them to the template as 'exchangeRates' #}

  





  <div class="main-panel">
    <div class="content-wrapper">
      <div class="row">
        <div class="col-md-12 grid-margin">
          <div class="row">
            <div class="col-12 col-xl-8 mb-4 mb-xl-0">
              <h3 class="font-weight-bold">
                <span class="text-primary">Bienvenue</span>
                {{app.user.fullname}}</h3>
              {% if oldCommandsCount > 0 %}
                <h3 class="font-weight-normal mb-0 alert alert-info animated-text">
                  Veuillez patienter !
                                                            Vous avez
                  <span class="text-primary">{{ oldCommandsCount }}
                    commandes datant de plus de 30 jours. Veillez à les vérifier !</span>
                </h3>
              {% endif %}


            </div>

            
              <div class="justify-content-end" style="margin-left:130px;">

                <div class="d-flex" id="weather-data">
                  <div>
                    <h2 class="mb-0 font-weight-normal" style="color:#F28123">
                      <i class="icon-sun mr-2"></i>
                      <span id="temperature">Loading...</span>
                      <sup>C</sup>
                    </h2>
                  </div>
                  <div class="ml-2">
                    <h4 class="location font-weight-normal" style="color:#F28123">
                      <span id="city">Loading...</span>
                    </h4>
                    <h6 class="font-weight-normal" style="color:#F28123">
                      <span id="country">Loading...</span>
                    </h6>
                  </div>
                </div>


                <div class="mt-2">
                    <div class="d-flex">
                        <ul class="list-unstyled">
                            <li class="h5 text-center">
                                <img src="https://as2.ftcdn.net/v2/jpg/00/65/12/49/1000_F_65124908_UpNHzTdQn2HNAIT8yYqybMQeGfsRmVc7.jpg" alt="US Flag" width="30" class="flag-icon">
                                1 USD = {{ exchangeRates['TND']|number_format(2) }} TND
                                <img src="https://as2.ftcdn.net/v2/jpg/00/94/45/17/1000_F_94451798_ehaEejZoajI9yjKKwcFQlx9Jcpq44PEY.jpg" alt="US Flag" width="30" class="flag-icon">
                            </li>

                            <li class="h5">
                                <img src="https://as1.ftcdn.net/v2/jpg/01/14/25/88/1000_F_114258861_tNfUTPqB1y5HxT8OhEVjwrQGnp5KoHEX.jpg" width="30" alt="EU Flag" class="flag-icon">
                                1 EUR = {{ (exchangeRates['TND'] / exchangeRates['EUR'])|number_format(2) }} TND
                                <img src="https://as2.ftcdn.net/v2/jpg/00/94/45/17/1000_F_94451798_ehaEejZoajI9yjKKwcFQlx9Jcpq44PEY.jpg" alt="US Flag" width="30" class="flag-icon">

                            </li>

                        </ul>
                    </div>
                </div>



              </div>
            

            




          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12 grid-margin transparent">
          <div class="row">

            <div class="col-md-6 stretch-card transparent">
              <div class="card card-light-blue">
                <div class="card-body">
                  <p class="mb-4">Commandes en cours</p>
                  <p class="fs-30 mb-2">{{CommandsEnCours}}</p>
                  <p>{{ percentage|number_format(2) }} %</p>
                </div>
              </div>
            </div>

            <div class="col-md-6 stretch-card transparent">
              <div class="card card-light-danger">
                <div class="card-body">
                  <p class="mb-4">Total des commandes</p>
                  <p class="fs-30 mb-2">{{ totalCommandsCount }}</p>
                  <p>100 %</p>
                </div>
              </div>
            </div>


          </div>
        </div>
      </div>


      <div class="row">
        <div class="col-md-12 grid-margin stretch-card">
          <div class="card position-relative mb-4">
            <div class="card-body">
              <div id="detailedReports" class="carousel slide detailed-report-carousel position-static pt-2" data-ride="carousel">
                <div class="carousel-inner">
                  <div class="carousel-item active">
                    <div class="row col-md-12">
                      <div class=" col-md-8">
                        <div class="ml-xl-4 mt-3">
                          <p class="card-title">Trésorerie pays
                          </p>
                          <h1 class="text-primary">{{totalSoldeDesComptes}}$</h1>
                          <h3 class="font-weight-500 mb-xl-4 text-primary">Afrique</h3>
                          <p class="mb-2 mb-xl-0">Cela résume la somme totale des soldes à travers les pays, couvrant diverses transactions financières, dépôts et retraits.</p>
                        </div>
                      </div>

                    </div>
                    <div class="col-md-8 mx-auto ml-5">
                      <div class="row ml-5">
                        <div class="col-md-10 mt-3 ml-5">
                          <canvas id="myChart3"></canvas>
                          <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                          <script>
                            function getRandomColor() {
                            const letters = '0123456789ABCDEF';
                            let color = '#';
                            for (let i = 0; i < 6; i++) {
                            color += letters[Math.floor(Math.random() * 16)];
                            }
                            return color;
                            }

                            const paysData = {{ paysData|json_encode|raw }}; // Pass the pays data to JavaScript

                            const ctx3 = document.getElementById('myChart3');

                            const backgroundColors = Array.from({
                            length: paysData.length
                            }, () => getRandomColor());
                            const borderColor = backgroundColors.map(color => color.replace("0.5", "1"));

                            new Chart(ctx3, {
                            type: 'pie',
                            data: {
                            labels: paysData.map(pays => pays.name), // Use pays names as labels
                            datasets: [
                            {
                            label: 'Solde des comptes',
                            data: paysData.map(pays => pays.solde), // Use solde values as data
                            backgroundColor: backgroundColors,
                            borderColor: borderColor,
                            borderWidth: 1
                            }
                            ]
                            },
                            options: {
                            scales: {
                            yAxes: [
                            {
                            ticks: {
                            beginAtZero: true
                            }
                            }
                            ]
                            }
                            }
                            });
                          </script>

                          <div id="north-america-legend"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  {% for bank in banks %}
                    <div class="carousel-item">
                      <div class="row">
                        <div class="col-md-12 col-xl-3 d-flex flex-column justify-content-start">
                          <div class="ml-xl-6 mt-3">
                            <p class="card-title">Trésorerie banques</p>
                            <!-- Display the bank's name -->
                            <h3 class="text-info">{{ bank.nom }}</h3>
                            <h5 class="font-weight-500 mb-xl-4 text-success">Les comptes bancaires
                              <span class="h4">→</span>
                            </h5>
                            <!-- You can add a description here -->
                          </div>
                        </div>
                        <div class="col-md-12 col-xl-9">
                          <div class="row">
                            <div class="col-md-6 border-right">
                              <div class="table-responsive mb-3 mb-md-0 mt-3">
                                <table class="table table-borderless report-table">
                                  {% for compte in bank.compte %}
                                    <tr>
                                      <td class="text-muted">{{ compte.num }}</td>
                                      <td class="">{{ compte.solde }}</td>

                                    </tr>
                                  {% endfor %}
                                </table>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  {% endfor %}
                </div>
                <a class="carousel-control-prev" href="#detailedReports" role="button" data-slide="prev">
                  <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                  <span class="sr-only">Previous</span>
                </a>
                <a class="carousel-control-next" href="#detailedReports" role="button" data-slide="next">
                  <span class="carousel-control-next-icon" aria-hidden="true"></span>
                  <span class="sr-only">Next</span>
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>


      <div class="row">
        <div class="col-md-6 grid-margin stretch-card">
          <div class="card">
            <div class="card-body">
              <p class="card-title">État des commandes</p>
              <p class="font-weight-500">La section État des commandes fournit des mises à jour en temps réel sur l'état de vos commandes, en indiquant si elles sont "en cours", "terminées", "livrées non payées" ou "non livrées". Restez informé de l'état d'avancement de vos commandes pour garantir un traitement et une livraison efficaces.</p>
              <canvas id="myChart" height="250"></canvas>
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <script>
                const ctx = document.getElementById('myChart');

                new Chart(ctx, {
                type: 'bar',
                data: {
                labels: [
                'En cours', 'Terminées', 'Livré non payé', 'Non livré'
                ],
                datasets: [
                {
                label: '# des commandes',
                data: [
                {{ pendingC }}, {{ livrepaye }}, {{ livrenonpaye }}, {{ nonlivre }}
                ],
                backgroundColor: [
                'rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)', 'rgba(75, 192, 110, 0.5)'
                ],
                borderColor: [
                'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
                }
                ]
                },
                options: {
                scales: {
                yAxes: [
                {
                ticks: {
                beginAtZero: true
                }
                }
                ]
                }
                }
                });
              </script>
            </div>
          </div>
        </div>
        {% if app.user and app.user.roles == "ROLE_ADMIN" %}

          <div class="col-md-6 grid-margin stretch-card">
            <div class="card">
              <div class="card-body">
                <div class="d-flex justify-content-between">
                  <p class="card-title">Statut des utilisateurs</p>
                </div>
                <p class="font-weight-500">La rubrique Statut des utilisateurs fournit des mises à jour en temps réel sur l'état des utilisateurs, indiquant s'ils sont "approuvés", "en attente", "bloqués" ou "débloqués". Restez informé des statuts des utilisateurs afin de garantir une gestion fluide des utilisateurs et un traitement efficace des comptes d'utilisateurs.</p>
                <div id="sales-legend" class="chartjs-legend mt-4 mb-2"></div>
                <canvas id="myChart2"></canvas>
                <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                <script>
                  const ctx2 = document.getElementById('myChart2');
                  new Chart(ctx2, {
                  type: 'pie',
                  data: {
                  labels: [
                  'En attente', 'Approuvés', 'Bloqués', 'Debloqués'
                  ],
                  datasets: [
                  {
                  label: '# des utilisateurs',
                  data: [
                  {{ pendingU }}, {{ approved }}, {{ blocked }}, {{ deblocked }}
                  ],
                  backgroundColor: [
                  'rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)', 'rgba(75, 192, 110, 0.5)'
                  ],
                  borderColor: [
                  'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'
                  ],
                  borderWidth: 1
                  }
                  ]
                  },
                  options: {
                  scales: {
                  yAxes: [
                  {
                  ticks: {
                  beginAtZero: true
                  }
                  }
                  ]
                  }
                  }
                  });
                </script>
              </div>
            </div>
          </div>

        {% endif %}
      </div>


    </div>
  </div>



  <script>
      function fetchWeatherData() {
          const apiKey = 'a833e1c1400d496a8a693622232107'; // Replace with your valid API key from WeatherAPI
          const apiUrl = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=Tunis`;

          fetch(apiUrl)
              .then(response => {
                  if (!response.ok) {
                      throw new Error('Network response was not ok');
                  }
                  return response.json();
              })
              .then(data => {
                  const temperatureElement = document.getElementById('temperature');
                  const cityElement = document.getElementById('city');
                  const countryElement = document.getElementById('country');

                  temperatureElement.textContent = data.current.temp_c;
                  cityElement.textContent = data.location.name;
                  countryElement.textContent = data.location.country;
              })
              .catch(error => {
                  console.error('Error fetching weather data:', error);
              });
      }

      fetchWeatherData();
  </script>


{% endblock %}
